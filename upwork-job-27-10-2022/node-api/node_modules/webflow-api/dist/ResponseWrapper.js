"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ResponseWrapper = /*#__PURE__*/function () {
  function ResponseWrapper(api) {
    _classCallCheck(this, ResponseWrapper);

    this.api = api;
  }

  _createClass(ResponseWrapper, [{
    key: "site",
    value: function site(_site) {
      return _objectSpread(_objectSpread({}, _site), {}, {
        collections: this.api.collections.bind(this.api, {
          siteId: _site._id
        }),
        webhooks: this.api.webhooks.bind(this.api, {
          siteId: _site._id
        }),
        domains: this.api.domains.bind(this.api, {
          siteId: _site._id
        }),
        webhook: function webhook(first) {
          var _this$api;

          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }

          return (_this$api = this.api).webhook.apply(_this$api, [_objectSpread(_objectSpread({}, first), {}, {
            siteId: _site._id
          })].concat(rest));
        },
        createWebhook: function createWebhook(first) {
          var _this$api2;

          for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            rest[_key2 - 1] = arguments[_key2];
          }

          return (_this$api2 = this.api).createWebhook.apply(_this$api2, [_objectSpread(_objectSpread({}, first), {}, {
            siteId: _site._id
          })].concat(rest));
        },
        removeWebhook: function removeWebhook(first) {
          var _this$api3;

          for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            rest[_key3 - 1] = arguments[_key3];
          }

          return (_this$api3 = this.api).removeWebhook.apply(_this$api3, [_objectSpread(_objectSpread({}, first), {}, {
            siteId: _site._id
          })].concat(rest));
        },
        publishSite: function publishSite(domains) {
          return this.api.publishSite({
            siteId: _site._id,
            domains: domains
          });
        }
      });
    }
  }, {
    key: "domain",
    value: function domain(_domain) {
      return _objectSpread({}, _domain);
    }
  }, {
    key: "collection",
    value: function collection(_collection) {
      return _objectSpread(_objectSpread({}, _collection), {}, {
        items: this.api.items.bind(this.api, {
          collectionId: _collection._id
        }),
        item: function item(first) {
          var _this$api4;

          for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            rest[_key4 - 1] = arguments[_key4];
          }

          return (_this$api4 = this.api).item.apply(_this$api4, [_objectSpread(_objectSpread({}, first), {}, {
            collectionId: _collection._id
          })].concat(rest));
        },
        createItem: function createItem(first) {
          var _this$api5;

          for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
            rest[_key5 - 1] = arguments[_key5];
          }

          return (_this$api5 = this.api).createItem.apply(_this$api5, [_objectSpread(_objectSpread({}, first), {}, {
            collectionId: _collection._id
          })].concat(rest));
        },
        updateItem: function updateItem(first) {
          var _this$api6;

          for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
            rest[_key6 - 1] = arguments[_key6];
          }

          return (_this$api6 = this.api).updateItem.apply(_this$api6, [_objectSpread(_objectSpread({}, first), {}, {
            collectionId: _collection._id
          })].concat(rest));
        },
        removeItem: function removeItem(first) {
          var _this$api7;

          for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
            rest[_key7 - 1] = arguments[_key7];
          }

          return (_this$api7 = this.api).removeItem.apply(_this$api7, [_objectSpread(_objectSpread({}, first), {}, {
            collectionId: _collection._id
          })].concat(rest));
        }
      });
    }
  }, {
    key: "item",
    value: function item(_item, collectionId) {
      return _objectSpread(_objectSpread({}, _item), {}, {
        update: function update(first) {
          var _this$api8;

          for (var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
            rest[_key8 - 1] = arguments[_key8];
          }

          return (_this$api8 = this.api).updateItem.apply(_this$api8, [_objectSpread(_objectSpread({}, first), {}, {
            collectionId: collectionId,
            itemId: _item._id
          })].concat(rest));
        },
        remove: this.api.updateItem.bind(this.api, {
          collectionId: collectionId,
          itemId: _item._id
        })
      });
    }
  }, {
    key: "user",
    value: function user(_user, siteId) {
      return _objectSpread(_objectSpread({}, _user), {}, {
        update: function update(first) {
          var _this$api9;

          for (var _len9 = arguments.length, rest = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
            rest[_key9 - 1] = arguments[_key9];
          }

          return (_this$api9 = this.api).updateUser.apply(_this$api9, [_objectSpread(_objectSpread({}, first), {}, {
            siteId: siteId
          })].concat(rest));
        },
        remove: function remove(first) {
          var _this$api10;

          for (var _len10 = arguments.length, rest = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
            rest[_key10 - 1] = arguments[_key10];
          }

          return (_this$api10 = this.api).removeUser.apply(_this$api10, [_objectSpread(_objectSpread({}, first), {}, {
            siteId: siteId
          })].concat(rest));
        }
      });
    }
  }, {
    key: "webhook",
    value: function webhook(_webhook, siteId) {
      return _objectSpread(_objectSpread({}, _webhook), {}, {
        remove: this.api.removeWebhook.bind(this.api, {
          siteId: siteId,
          webhookId: _webhook._id
        })
      });
    }
  }]);

  return ResponseWrapper;
}();

exports["default"] = ResponseWrapper;